import pandas as pd
import matplotlib.pyplot as plt

## Function 1
def trendlines_and_test_aligned(df, date_col='WeekStartDate', control_col='Control', test_col='Test'):
    """
    Plots the Control and Test sales with aligned means.
    
    Parameters:
    - df: DataFrame containing the sales data.
    - date_col: Column name for the date (default is 'WeekStartDate').
    - control_col: Column name for the control sales (default is 'Control').
    - test_col: Column name for the test sales (default is 'Test').
    """
    # Convert 'WeekStartDate' to datetime if needed
    df[date_col] = pd.to_datetime(df[date_col])

    # Calculate the means of Control and Test
    control_mean = df[control_col].mean()
    test_mean = df[test_col].mean()

    # Calculate the shift needed to align the means
    mean_difference = control_mean - test_mean

    # Adjust the Test series by adding the mean difference to align means
    df['Adjusted_Test'] = df[test_col] + mean_difference

    # Plot Sales
    plt.figure(figsize=(10, 6))

    # Plot original 'Control' and 'Test' columns
    plt.plot(df[date_col], df[control_col], label='Control (Original)', color='blue')
    plt.plot(df[date_col], df[test_col], label='Test (Original)', color='orange')

    # Plot the adjusted Test series to align means
    plt.plot(df[date_col], df['Adjusted_Test'], label='Test (Aligned to Control)', color='green', linestyle='--')

    # Add labels and title
    plt.xlabel('Week Start Date')
    plt.ylabel('AVG Weekly Sales')
    plt.title('Merch Sales Control vs Test with Aligned Means')

    # Adjust legend to avoid overlap
    plt.legend(loc='upper left')

    # Rotate x-axis labels if needed
    plt.xticks(rotation=45)

    # Show plot
    plt.tight_layout()
    plt.show()


## Function 2

def plot_aligned_sales(df, control_col='Control', test_col='Test', date_col='WeekStartDate'):
    """
    Plots control and test sales data with the test series aligned to match the control series mean.
    
    Parameters:
    df (pd.DataFrame): The DataFrame containing the sales data.
    control_col (str): The name of the column representing control sales.
    test_col (str): The name of the column representing test sales.
    date_col (str): The name of the column representing the date (should be in a datetime format).
    """
    # Convert 'WeekStartDate' to datetime if not already done
    df[date_col] = pd.to_datetime(df[date_col])

    # Align means for comparison
    control_mean = df[control_col].mean()
    test_mean = df[test_col].mean()

    # Shift the 'Test' series to match the 'Control' series mean
    df['Test_Aligned'] = df[test_col] + (control_mean - test_mean)

    # Plot Sales
    plt.figure(figsize=(10, 6))

    # Plot 'control' and 'test' columns
    plt.plot(df[date_col], df[control_col], label='Control', color='blue')
    plt.plot(df[date_col], df['Test_Aligned'], label='Test (Aligned)', color='orange')

    # Add labels and title
    plt.xlabel('Week Start Date')
    plt.ylabel('AVG Weekly Sales')
    plt.title('Merch Sales Control vs Test (Aligned Means)')
    plt.legend()

    # Rotate x-axis labels if needed
    plt.xticks(rotation=45)

    # Show plot
    plt.tight_layout()
    plt.show()

# Example usage:
# plot_aligned_sales(weekly_sales_df)



# Example of how to use the function with a DataFrame
# plot_sales_with_aligned_means(weekly_sales_df)
